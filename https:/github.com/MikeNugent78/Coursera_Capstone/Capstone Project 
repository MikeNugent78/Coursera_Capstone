{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# * * * * * * Library Management * * * * * *"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Library installs"
        },
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Requirement already satisfied: BeautifulSoup4 in /opt/conda/envs/Python36/lib/python3.6/site-packages (4.7.1)\nRequirement already satisfied: soupsieve>=1.2 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from BeautifulSoup4) (1.7.1)\nRequirement already satisfied: geopy in /opt/conda/envs/Python36/lib/python3.6/site-packages (1.18.1)\nRequirement already satisfied: geographiclib<2,>=1.49 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from geopy) (1.49)\nRequirement already satisfied: requests in /opt/conda/envs/Python36/lib/python3.6/site-packages (2.21.0)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests) (2020.6.20)\nRequirement already satisfied: idna<2.9,>=2.5 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests) (2.8)\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests) (3.0.4)\nRequirement already satisfied: urllib3<1.25,>=1.21.1 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests) (1.24.1)\nCollecting folium\n\u001b[?25l  Downloading https://files.pythonhosted.org/packages/a4/f0/44e69d50519880287cc41e7c8a6acc58daa9a9acf5f6afc52bcc70f69a6d/folium-0.11.0-py2.py3-none-any.whl (93kB)\n\u001b[K     |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 102kB 9.0MB/s ta 0:00:011\n\u001b[?25hCollecting branca>=0.3.0 (from folium)\n  Downloading https://files.pythonhosted.org/packages/13/fb/9eacc24ba3216510c6b59a4ea1cd53d87f25ba76237d7f4393abeaf4c94e/branca-0.4.1-py3-none-any.whl\nRequirement already satisfied: jinja2>=2.9 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from folium) (2.10)\nRequirement already satisfied: requests in /opt/conda/envs/Python36/lib/python3.6/site-packages (from folium) (2.21.0)\nRequirement already satisfied: numpy in /opt/conda/envs/Python36/lib/python3.6/site-packages (from folium) (1.15.4)\nRequirement already satisfied: MarkupSafe>=0.23 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from jinja2>=2.9->folium) (1.1.0)\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests->folium) (3.0.4)\nRequirement already satisfied: idna<2.9,>=2.5 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests->folium) (2.8)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests->folium) (2020.6.20)\nRequirement already satisfied: urllib3<1.25,>=1.21.1 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests->folium) (1.24.1)\nInstalling collected packages: branca, folium\nSuccessfully installed branca-0.4.1 folium-0.11.0\nCollecting pgeocode\n  Downloading https://files.pythonhosted.org/packages/86/44/519e3db3db84acdeb29e24f2e65991960f13464279b61bde5e9e96909c9d/pgeocode-0.2.1-py2.py3-none-any.whl\nRequirement already satisfied: requests in /opt/conda/envs/Python36/lib/python3.6/site-packages (from pgeocode) (2.21.0)\nRequirement already satisfied: numpy in /opt/conda/envs/Python36/lib/python3.6/site-packages (from pgeocode) (1.15.4)\nRequirement already satisfied: pandas in /opt/conda/envs/Python36/lib/python3.6/site-packages (from pgeocode) (0.24.1)\nRequirement already satisfied: urllib3<1.25,>=1.21.1 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests->pgeocode) (1.24.1)\nRequirement already satisfied: idna<2.9,>=2.5 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests->pgeocode) (2.8)\nRequirement already satisfied: chardet<3.1.0,>=3.0.2 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests->pgeocode) (3.0.4)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from requests->pgeocode) (2020.6.20)\nRequirement already satisfied: pytz>=2011k in /opt/conda/envs/Python36/lib/python3.6/site-packages (from pandas->pgeocode) (2018.9)\nRequirement already satisfied: python-dateutil>=2.5.0 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from pandas->pgeocode) (2.7.5)\nRequirement already satisfied: six>=1.5 in /opt/conda/envs/Python36/lib/python3.6/site-packages (from python-dateutil>=2.5.0->pandas->pgeocode) (1.12.0)\nInstalling collected packages: pgeocode\nSuccessfully installed pgeocode-0.2.1\n"
                }
            ],
            "source": "!pip install BeautifulSoup4      ##DEBUGGING - may be needed for certain notebooks\n!pip install geopy\n!pip install requests            ##DEBUGGING - may be needed for certain notebooks\n!pip install folium\n!pip install pgeocode              ##DEBUGGING - may be needed for certain notebooks"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Library imports"
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [],
            "source": "import types\nfrom bs4 import BeautifulSoup\n\nimport pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nimport requests\nimport folium # map rendering library\n\nfrom sklearn.linear_model import LinearRegression\n\nfrom geopy.geocoders import Nominatim            # convert an address into latitude and longitude values\nfrom pandas.io.json import json_normalize\n\nimport pgeocode\nimport numpy as np\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns\n"
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [],
            "source": "# The code was removed by Watson Studio for sharing."
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## * * * * * *  Library Management Ends * * * * * * "
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# * * * * * EXTERNAL DATA INPUT STARTS * * * * *"
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [],
            "source": "## COGNITIVE CLASS ENVIRONMENT READS\n\n## Retrieve a local file copy of the 2017 IRS tax files\nif Environment != \"IBM\":\n    IRS_17zpallagi_data = pd.read_csv('17zpallagi.csv')\n\n## Retrieve a local file copy of Census Bureau population figures\nif Environment != \"IBM\":\n    Census_data_2010 = pd.read_csv('2010+Census+Population+By+Zipcode+(ZCTA).csv')\n\n##Census_data_2010.head()                 ## DEBUGGING - remove to see first rows of data\n\n## IBM ENVIRONMENT READS\n\nif Environment == \"IBM\":\n    \n    body = client_398e88bf026c4af6a650152ac459f74a.get_object(Bucket='courseracapstoneproject-donotdelete-pr-e0jpy8qu07bg2j',Key='17zpallagi.csv')['Body']\n    # add missing __iter__ method, so pandas accepts body as file-like object\n    if not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n    \n    IRS_17zpallagi_data = pd.read_csv(body)\n\n    body = client_398e88bf026c4af6a650152ac459f74a.get_object(Bucket='courseracapstoneproject-donotdelete-pr-e0jpy8qu07bg2j',Key='2010+Census+Population+By+Zipcode+(ZCTA).csv')['Body']\n    # add missing __iter__ method, so pandas accepts body as file-like object\n    if not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n\n    Census_data_2010 = pd.read_csv(body)\n      "
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "\n## * * * * * *  External Data Input Ends * * * * * * "
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# * * * * * FUNCTION LIBRARY START * * * * *"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Function: build_city_zipcodes\n  * HTML Zip Code processor"
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [],
            "source": "## This function will take a dataframe from Zip-codes.com and return a data file of zip codes for the given area\n##  \n## Arguments:\n##      http_location - the http address of the zip-codes web page to be processed\n##      ind - the column name used to test against the ind_key\n##      ind_key - the value in the column name \"ind\" used to select the records\n##\n## Returns:\n##      a dataframe with the columns ['Zip Code','Area Code','City','County','State','Country']\n\ndef build_city_zipcodes(http_location,ind,ind_key):\n    ## Get the data from the web page sent and convert it\n    print (\"starting GET\")\n    web_zipcodes_text = requests.get(http_location).text\n    print (\"GET complete\")\n    web_zipcodes_soup = BeautifulSoup(web_zipcodes_text, 'html.parser')\n    \n    ## Find the table needed in the html\n    zipcodes_soup = web_zipcodes_soup.find('table', class_='statTable')\n    \n    ## Set the column names\n    column_names =['Zip Code','Area Code','City','County','State','Country']\n\n    \n    ## Get 'tr' records, but skip the first row because it is the header information\n\n    output_rows = []                   ## Create the output data set\n    Is_this_row_1 = \"Y\"\n\n    for table_row in zipcodes_soup.findAll('tr'):\n        columns = table_row.findAll('td')                 \n\n        if Is_this_row_1 == \"Y\":                \n            Is_this_row_1 = \"N\"\n            continue\n\n        ## Strip data as needed to remove unwanted characters and append to current row\n        output_row = []                              \n    \n        for column in columns:   \n             output_row.append(column.text.replace('ZIP Code ','').replace(',',''))        \n    \n        output_rows.append(output_row)\n        \n    ## Take the column delimited results and convert to a data frame\n    zip_codes = pd.DataFrame(data=output_rows)    \n    zip_codes.columns = column_names                     \n    \n##  The data sometimes contains wrong states.  Use the state requested to drop others\n    if ind == \"City\":\n        zip_codes = zip_codes.loc[zip_codes['City'] == ind_key]\n    elif ind == \"County\":\n        zip_codes = zip_codes.loc[zip_codes['County'] == ind_key]\n    elif ind == \"State\":\n        zip_codes = zip_codes.loc[zip_codes['State'] == ind_key]\n        \n    return zip_codes            "
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Function: city_zip_lat_long\n  * Latitude and longitude retrieval by zip code"
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [],
            "source": "## This Function takes in a zipcode file and looks up the latitude and longitude\n##\n## Arguments:\n##      zip_code_df = a dataframe containing zip codes in any column named \"Zip Code\"\n##\n## Returns:\n##      zip_code_lat_long - a dataframe containing with these columns['Zip Code', 'latitude', 'longitude']\n\ndef city_zip_lat_long (zip_code_df):\n\n    ## Initial values as needed\n    longitudes = []\n    latitudes = []\n    zip_codes = []\n    nomi = pgeocode.Nominatim('us')\n\n    ## set an index for the number of rows in the input file\n    for index, row in zip_code_df.iterrows():\n\n        ## Get the latitude and longitude from nomi and store\n        latitude = nomi.query_postal_code(zip_code_df[\"Zip Code\"][index]).latitude \n        longitude = nomi.query_postal_code(zip_code_df[\"Zip Code\"][index]).longitude\n         \n        ## Get the 'Zip Code' value that was used and store\n        zip_code = zip_code_df[\"Zip Code\"][index]\n\n        ##Append all three values on the output file\n        zip_codes.append(zip_code)\n        latitudes.append(latitude)\n        longitudes.append(longitude)\n        \n    ## Create a data frame from the three saved files\n    zip_code_lat_long = pd.DataFrame()\n    \n    zip_code_lat_long.insert(0,\"Zip Code\",zip_codes)\n    zip_code_lat_long.insert(1,\"Zipcode Latitude\",latitudes)\n    zip_code_lat_long.insert(2,\"Zipcode Longitude\",longitudes)\n    \n    return zip_code_lat_long"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Function: get_geo_loc\n  * Plot city and zip code latitude and longitude data"
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [],
            "source": "## This Function takes in a city address and returns the longitude and latitude\n## Arguments:\n##      city_address - a city name and 2 digit state code in the form \"city, ST\"\n##\n## Returns:\n##      city_latitude - the latitude of the city_address argument\n##      city_longitude - the longitude of the city_address argument\n\n\ndef get_geo_loc (city_address):\n\n    city_geolocator = Nominatim(user_agent=\"US_explorer\")\n    city_location = city_geolocator.geocode(city_address)\n\n    city_latitude = city_location.latitude\n    city_longitude = city_location.longitude\n\n    return city_latitude, city_longitude"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Function: city_venue_plot\n  * Plot city, zipcodes, and venues by latitude and longitude"
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [],
            "source": "## Arguments:\n##      city_name - the main city for the zip code plotting in the form \"city, ST\"\n##      zipcode_lat_long - zipcodes lat and long to plot with the columns \"Zipcode\",\"Zipcode Latitude\",\"Zipcode Longitude\"\n##                      for Venue plotting includes the columns \"Venue Name\", \"Venue Latitude\", and \"Venue Longitude\"\n##      graph_type - \"Zipcodes\" for zipcodes only, \"Venues\" for venues only, \"Both\" for both zipcodes and venues\n##      zoom - initial zoom value for the zoom_start parameter (default is 12)\n##      width - initial width value for the width parameter (default is 100%)\n##      height - initial height value for the length parameter (default is 100%)\n##      top - initial top value for the top parameter (default is 10%)\n## Returns:\n##      Map_cluster which contains the original city with a plot of the zipcodes using the map parameters provided\n\ndef city_venue_plot (city_name, zipcode_venue_lat_long, graph_type, zoom=12):\n\n    # Get city longitude and latitude as passed into function\n    city_lat, city_long = get_geo_loc(city_name)\n    \n\n    map_clusters = folium.Map(location=[city_lat, city_long],zoom_start=zoom)\n    # add markers to the map\n    markers_colors = []\n    print (\"*********Graph type********\",graph_type)\n    \n    if graph_type == \"Zipcodes\" or graph_type == \"Both\":\n        for lat, lon, poi in zip(zipcode_venue_lat_long['Zipcode Latitude'], zipcode_venue_lat_long['Zipcode Longitude'], zipcode_venue_lat_long['Zip Code']):\n            label = folium.Popup(str(poi), parse_html=True)\n            folium.CircleMarker(\n                [lat, lon],\n                radius=6,\n                popup=label,\n                color='#000000',\n                ##color='blue',\n                fill=True,\n                fill_color='#eeefff',\n                fill_opacity=0.7).add_to(map_clusters)\n               \n                \n    if graph_type == \"Venues\" or graph_type == \"Both\":\n        for lat, lon, poi in zip(zipcode_venue_lat_long['Venue Latitude'], zipcode_venue_lat_long['Venue Longitude'], zipcode_venue_lat_long['Venue Name']):\n            label = folium.Popup(str(poi), parse_html=True)\n            folium.CircleMarker(\n                [lat, lon],\n                radius=2,\n                popup=label,\n                color='#FF0000',\n                fill=True,\n                fill_color='#FF0000',\n                fill_opacity=0.7).add_to(map_clusters)\n        \n    return map_clusters"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Function: get_venues\n  * Retrieves grocery venues for the zipcode lat and long provided"
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [],
            "source": "# The code was removed by Watson Studio for sharing."
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [],
            "source": "## Retrieves 5 categories of grocery stores from a list of zip codes with lats and longs and returns a similar file\n##\n## Arguments:\n##      zipcodes - a list of Zipcodes being retrieved\n##      latitudes - the lastitudes of the zipcodes\n##      longitudes - the longitudes of the zipcodes\n##\n## Returns:\n##      A data frame consisting of\n##            original zipcode argument\n##            original latitude argument\n##            original longitude argument\n##            Venue name\n##            Venue latitude\n##            Venue longitude\n##            Venue category\n\ndef get_venues (zipcodes, latitudes, longitudes):\n\n    grocery_store = '4bf58dd8d48988d118951735'\n    organic_grocery = '52f2ab2ebcbc57f1066b8b45'\n    supermarket = '52f2ab2ebcbc57f1066b8b46' \n\n    radius = 1604       ### the USDA Economic research center describes 1 mile (1604 meters) as the expected range to find a supermarket\n    \n    not_found = 0\n    venues_list=[]\n    \n    for name, lat, lng in zip(zipcodes, latitudes, longitudes):\n              \n        # create the API request URL\n        url = 'https://api.foursquare.com/v2/venues/search?client_id={}&client_secret={}&v={}&ll={},{}&radius={}&categoryId={},{},{}&limit={}'.format(\n            CLIENT_ID,\n            CLIENT_SECRET, \n            VERSION, \n            lat,\n            lng, \n            radius, \n            grocery_store,\n            organic_grocery,\n            supermarket,\n            LIMIT)\n            \n        # make the GET request\n        try:\n            results = requests.get(url).json()[\"response\"][\"venues\"]\n            \n        # return only relevant information for each nearby venue\n            venues_list.append([(\n                name,                         ##Zipcode search data\n                lat,                          ##Zipcode latitude  \n                lng,                          ##Zipcode longitude \n                v['name'], \n                v['location']['lat'], \n                v['location']['lng'],\n                v['categories'][0]['name']) for v in results])\n        except:\n            print (\"Fail \", name, lat, lng)\n            not_found +=1\n                \n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    print (\"SHAPE\",nearby_venues.shape)\n    \n    nearby_venues.columns = ['Zip Code', \n                  'Zipcode Latitude', \n                  'Zipcode Longitude', \n                  'Venue Name', \n                  'Venue Latitude', \n                  'Venue Longitude', \n                  'Venue Category']\n    \n    print (\"incomplete data on {} categories\".format(not_found))\n\n    \n    return(nearby_venues)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Function: clean_data\n  * removes unwanted venue categories from data"
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [],
            "source": "## Retrieves 3 categories of dataframe provided and prints statistics if designated\n##\n## Arguments:\n##      unclean_df - a data frame to be cleaned consisting of at least the column \"Venue Category\"\n##      print_ind - a value of \"Y\" to print statitistics or a value of \"N\" to not print\n##\n## Returns:\n##      A data frame consisting of Venue Categories of only the following:\n##            \"Grocery Store\"\n##            \"Supermarket\"\n##            \"Organic Grocery\"\n## \ndef clean_data (unclean_df,print_ind = \"N\"):\n    \n    ## If indicated, print the original category variable counts\n    if print_ind == \"Y\":\n        print ('***********Original file venue names ************')\n        print (unclean_df[\"Venue Category\"].value_counts())\n        print ('*************************************************')\n        print (' ')\n\n    Keep_columns = [\"Grocery Store\",\"Supermarket\",\"Organic Grocery\",\"\"]\n    clean_df = unclean_df.loc[unclean_df['Venue Category'].isin(Keep_columns)] \n\n    ## If indicated, print the \"cleaned\" category variable counts\n    if print_ind == \"Y\":\n        print ('***********Revised file venue names ************')\n        print (clean_df[\"Venue Category\"].value_counts())\n        print ('*************************************************')\n        \n    return (clean_df)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Function Zip_code_store_counts\n  *  Count the number of stores by zip code"
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "metadata": {},
            "outputs": [],
            "source": "## This function will take a dataframe and count the number of occurrences of each record by zip code\n##  \n## Arguments:\n##      zip_code_df - a dataframe consisting of a Zip Code column which will be counted\n##\n## Returns:\n##      a dataframe indexed by 'Zip Code' with a column 'store count'\n\ndef Zip_code_store_counts (zip_code_df):\n    \n    ##create the value counts and rename the columns as needed\n    zip_code_grocery_count_by_zip = zip_code_df['Zip Code'].value_counts().reset_index().rename(\n    columns={'Zip Code':'store count','index':'Zip Code'})\n\n    ## Make the index Zip Code\n    zip_code_grocery_count_by_zip.set_index('Zip Code',inplace=True)\n\n    ## Sort the index by Zip Code\n    zip_code_grocery_count_by_zip.sort_index(inplace=True)\n\n    return zip_code_grocery_count_by_zip"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Function quantile_column\n  *  Separate the data into 5 bins for data graphing"
        },
        {
            "cell_type": "code",
            "execution_count": 13,
            "metadata": {},
            "outputs": [],
            "source": "## This function will take a dataframe and separate the data by the \"per cap income\" data\n## into 5 bins\n##\n## Arguments:\n##      city_IRS_df - a dataframe containing a \"per cap income\" column\n## \n##  Returns:\n##      the original dataframe with a new column called \"quantile\"\n##         representing the bin the \"per cap income\" amount is in\n\ndef quantile_column (city_IRS_df):\n\n    ## Use these bin lables for the categories\n    bin_labels = [1,2,3,4,5]\n\n    ## Bin the data by 20% categories\n    city_IRS_df['quantile'] = pd.qcut(city_IRS_df['Per Cap Income'],\n                              q=[0, .2, .4, .6, .8,  1],\n                              labels=bin_labels)\n    \n    ## Convert the categories to numbers for graphing\n    city_IRS_df['quantile'] = city_IRS_df['quantile'].cat.codes\n    \n    return city_IRS_df\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Function graph_stores_percap\n  *  Calculate correlation line and graph the data and line"
        },
        {
            "cell_type": "code",
            "execution_count": 14,
            "metadata": {},
            "outputs": [],
            "source": "## This function will take a dataframe and graph the number of stores by\n##    per capita income with a correlation line\n##\n## Arguments:\n##      stores_percap_df - a dataframe containing a \"quantile\" and \"per cap income\" columns\n## \n##  Returns:\n##      Displays a graph when plot is designated for inline\n\ndef graph_stores_percap (stores_percap_df):\n\n   ##### Create the fitted regression line #####\n    \n    ## Create a linear regression variable\n    stores_percap_LR = LinearRegression()\n\n    ## Set the X and Y values as \"quantile\" and \"store count\"\n    X = stores_percap_df[['quantile']]\n    Y = stores_percap_df['store count']\n\n    ## Fit the variables\n    stores_percap_LR.fit(X,Y)\n\n    ## Print the intercept and coefficient\n    print (\"Intercept \",stores_percap_LR.intercept_)\n    print (\"Coefficient \",stores_percap_LR.coef_)\n    \n  ##### CREATE AND SHOW GRAPH #####\n    \n    width = 12\n    height = 10\n    plt.figure(figsize=(width, height))\n    sns.regplot(x=\"quantile\", y=\"store count\", data=stores_percap_df)\n    plt.ylim(0,)\n    \n    return"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## * * * * * FUNCTION LIBRARY ENDS * * * * *"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "#  LOS ANGELES ZIP CODE and VENUE BUILD STARTS\n### Build Zip Code table for Los Angeles"
        },
        {
            "cell_type": "code",
            "execution_count": 15,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Using previous file\n(94, 6)\n"
                }
            ],
            "source": "## If previous sessions created a zip code file, use that file, otherwise\n## get Zip Codes from HTML pages. Keep only rows where City== \"LOS ANGELES\".\n\n##See if the file exists and use it if it does\nLA_zipcodes = pd.DataFrame()\n\ntry:\n    if Environment != \"IBM\":\n        LA_zipcodes = pd.read_csv('LA_zipcodes.csv')\n\n    else:\n        body = client_398e88bf026c4af6a650152ac459f74a.get_object(Bucket='courseracapstoneproject-donotdelete-pr-e0jpy8qu07bg2j',Key='LA_zipcodes.csv')['Body']\n        # add missing __iter__ method, so pandas accepts body as file-like object\n        if not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n\n        LA_zipcodes = pd.read_csv(body)\n    \n    LA_zipcodes['Zip Code'] = LA_zipcodes['Zip Code'].astype(object)    ##zip code gets changed to int64, so fix it\n    print (\"Using previous file\")\n\n## Create a new file if not found\nexcept:\n    print (\"Creating new file\")\n    ## Get Page 1\n    LA_zipcodes = build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=LOS+ANGELES&pg=1',\"City\", \"LOS ANGELES\")\n    \n    ## Get Page 2\n    LA_zipcodes = LA_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=LOS+ANGELES&pg=2',\"City\", \"LOS ANGELES\"))\n\n    ## Get Page 3\n    LA_zipcodes = LA_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=LOS+ANGELES&pg=3',\"City\", \"LOS ANGELES\"))\n\n    ## Reset the index        \n    LA_zipcodes.reset_index(drop=True,inplace=True)\n    LA_zipcodes.to_csv('LA_zipcodes.csv',index=False)\n    \nprint (LA_zipcodes.shape)\n##LA_zipcodes                        ## DEBUGGING - uncomment to print header\""
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Get Los Angeles zip code Lat and Long"
        },
        {
            "cell_type": "code",
            "execution_count": 16,
            "metadata": {
                "scrolled": true
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "(93, 3)\n"
                }
            ],
            "source": "LA_zipcodes_lat_long = city_zip_lat_long(LA_zipcodes)\n\n## Los Angeles contains a unique zip code for a single entity which doesn't have a lat and lon value\n## Drop that row and continue\nLA_zipcodes_lat_long.dropna(axis=0,how=\"any\",inplace=True)\n\nprint (LA_zipcodes_lat_long.shape)\n##LA_zipcodes_lat_long.head()                            ##DEBUGGING - uncomment to see LA file"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Get LA Grocery Stores lat and Long"
        },
        {
            "cell_type": "code",
            "execution_count": 17,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Using previous file\n"
                },
                {
                    "data": {
                        "text/plain": "(1538, 7)"
                    },
                    "execution_count": 17,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "LIMIT = 100\n\n## initialize data frame\nLA_grocery_stores_rough = []\n\ntry:\n    if Environment != \"IBM\":\n\n    ## read the file\n        LA_grocery_stores_rough = pd.read_csv('LA_grocery_stores_rough.csv')\n    \n    else:\n        \n        body = client_398e88bf026c4af6a650152ac459f74a.get_object(Bucket='courseracapstoneproject-donotdelete-pr-e0jpy8qu07bg2j',Key='LA_grocery_stores_rough.csv')['Body']\n        # add missing __iter__ method, so pandas accepts body as file-like object\n        if not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n\n        LA_grocery_stores_rough = pd.read_csv(body)\n\n    print (\"Using previous file\")\n           \nexcept:\n    print (\"Creating new file\")\n    LA_grocery_stores_rough = []\n\n\n    LA_grocery_stores_rough = get_venues(zipcodes=LA_zipcodes_lat_long['Zip Code'],\n                                           latitudes=LA_zipcodes_lat_long['Zipcode Latitude'],\n                                            longitudes=LA_zipcodes_lat_long['Zipcode Longitude'])\n    \n    print (\"Storing new file\")\n    LA_grocery_stores_rough.to_csv('LA_grocery_stores_rough.csv',index=False)\n\nLA_grocery_stores_rough.shape                           ## DEBUGGING - uncomment to see file shape"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Clean up data"
        },
        {
            "cell_type": "code",
            "execution_count": 18,
            "metadata": {
                "scrolled": true
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "***********Original file venue names ************\nGrocery Store           1222\nSupermarket              235\nLiquor Store              33\nMarket                     8\nShopping Mall              6\nOrganic Grocery            5\nDepartment Store           4\nHealth Food Store          4\nIndian Restaurant          4\nSpanish Restaurant         4\nButcher                    2\nDeli / Bodega              2\nCaribbean Restaurant       2\nSandwich Place             1\nKosher Restaurant          1\nFarmers Market             1\nJuice Bar                  1\nSnack Place                1\nIce Cream Shop             1\nCollege Bookstore          1\nName: Venue Category, dtype: int64\n*************************************************\n \n***********Revised file venue names ************\nGrocery Store      1222\nSupermarket         235\nOrganic Grocery       5\nName: Venue Category, dtype: int64\n*************************************************\n"
                }
            ],
            "source": "## some of the stores have incorrect venue ids and need to be cleaned up.  Only retain the original 3 categories.\n\nLA_grocery_stores = clean_data(LA_grocery_stores_rough,\"Y\")\n"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "##    * * * * * * *  LA BUILD ENDS  * * * * * * *"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "#  NEW YORK ZIP CODE and VENUE BUILD STARTS \n### Get zip codes for New York area"
        },
        {
            "cell_type": "code",
            "execution_count": 19,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Using previous file\n(274, 6)\n"
                }
            ],
            "source": "## If you already have created a zip code file from previous sessions, use that file, otherwise\n## Get Zip Codes from HTML pages. Test each Bureau to clean the data\n\n##See if the file exists\ntry:\n    if Environment != \"IBM\":\n        NY_zipcodes = pd.read_csv('NY_zipcodes.csv')\n        NY_zipcodes['Zip Code'] = NY_zipcodes['Zip Code'].astype(object)    ##zip code gets changed to int64, so fix it\n\n    else:\n        body = client_398e88bf026c4af6a650152ac459f74a.get_object(Bucket='courseracapstoneproject-donotdelete-pr-e0jpy8qu07bg2j',Key='NY_zipcodes.csv')['Body']\n        # add missing __iter__ method, so pandas accepts body as file-like object\n        if not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n\n        NY_zipcodes = pd.read_csv(body)\n    \n    NY_zipcodes['Zip Code'] = NY_zipcodes['Zip Code'].astype(object)    ##zip code gets changed to int64, so fix it\n    print (\"Using previous file\")\n           \n## If the file wasn't found or some other error, recreate the file\nexcept:\n    ## STATEN ISLAND\n    \n    print(\"Staten page 1 started\")\n    NY_zipcodes = build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=STATEN%20ISLAND&pg=1', \"City\", \"STATEN ISLAND\")\n    print(\"Staten page 1 ended\")\n    \n    ## MANHATTAN Page 1\n\n    print (\"Manhattan Page 1 started\")                                 \n    NY_zipcodes = NY_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=MANHATTAN&pg=1', \"City\", \"NEW YORK\"))\n    print (\"Manhattan Page 1 ended\")                                 \n\n    ## MANHATTAN Page 2 \n\n    print (\"Manhattan Page 2 started\")                                 \n    NY_zipcodes = NY_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=MANHATTAN&pg=2', \"City\", \"NEW YORK\"))\n    print (\"Manhattan Page 2 ended\")\n\n    ## MANHATTAN Page 3\n\n    print (\"Manhattan Page 3 started\")                                 \n    NY_zipcodes = NY_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=MANHATTAN&pg=3', \"City\", \"NEW YORK\"))\n    print (\"Manhattan Page 3 ended\")\n\n    ## QUEENS Page 1\n\n    print (\"Queens Page 1 started\")                                 \n    NY_zipcodes = NY_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=QUEENS&pg=1', \"County\", \"QUEENS\"))\n    print (\"Queens Page 1 ended\")                                 \n\n    ## QUEENS Page 2\n    print (\"Queens Page 2 started\")                                 \n    NY_zipcodes = NY_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=QUEENS&pg=2', \"County\", \"QUEENS\"))\n    print (\"Queens Page 2 ended\")                                 \n\n    ## THE BRONX\n    ## Page 1\n    print (\"Bronx Page 1 started\")                                 \n    NY_zipcodes = NY_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=BRONX&pg=1', \"City\", \"BRONX\")) \n    print (\"Bronx Page 1 ended\")\n                                 \n    ##BROOKLYN\n    ## Page 1\n    print (\"Brooklyn Page 1 started\")                                 \n    NY_zipcodes = NY_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=BROOKLYN&pg=1', \"City\", \"BROOKLYN\"))\n    print (\"Brooklyn Page 1 ended\")\n                                 \n    ## Page 2\n    print (\"Brooklyn Page 2 started\")                                 \n    NY_zipcodes = NY_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=BROOKLYN&pg=2', \"City\", \"BROOKLYN\"))\n    print (\"Brooklyn Page 2 ended\")\n                                 \n    ## Reset the index\n    NY_zipcodes.reset_index(drop=True,inplace=True)\n    NY_zipcodes.to_csv('NY_zipcodes.csv',index=False)\n\nprint (NY_zipcodes.shape)                            ## DEBUGGING - uncomment to see file shape\n##NY_zipcodes                                          ## DEBUGGING - uncomment to see file"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Get NY zip code Lat and Long"
        },
        {
            "cell_type": "code",
            "execution_count": 20,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": "NY_zipcodes_lat_long = city_zip_lat_long(NY_zipcodes)\n##NY_zipcodes_lat_long.head()                    ##DEBUGGING - uncomment to see NY file"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Get NY Grocery Stores lat and Long"
        },
        {
            "cell_type": "code",
            "execution_count": 21,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Using previous file\n"
                },
                {
                    "data": {
                        "text/plain": "(10054, 7)"
                    },
                    "execution_count": 21,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "LIMIT = 100\n\n## Initialize the file\nNY_grocery_stores_rough = []\n\ntry:\n    if Environment != \"IBM\":\n\n    ## read the file\n        NY_grocery_stores_rough = pd.read_csv('NY_grocery_stores_rough.csv')\n    \n    else:\n        \n        body = client_398e88bf026c4af6a650152ac459f74a.get_object(Bucket='courseracapstoneproject-donotdelete-pr-e0jpy8qu07bg2j',Key='NY_grocery_stores_rough.csv')['Body']\n        # add missing __iter__ method, so pandas accepts body as file-like object\n        if not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n\n        NY_grocery_stores_rough = pd.read_csv(body)\n\n    print (\"Using previous file\")\n           \nexcept:\n    print (\"Creating new file\")\n    NY_grocery_stores_rough = []\n\n    NY_grocery_stores_rough = get_venues(zipcodes=NY_zipcodes_lat_long['Zip Code'],\n                                           latitudes=NY_zipcodes_lat_long['Zipcode Latitude'],\n                                            longitudes=NY_zipcodes_lat_long['Zipcode Longitude'])\n    \n    print (\"Storing new file\")\n    NY_grocery_stores_rough.to_csv('NY_grocery_stores_rough.csv',index=False)\n    \nNY_grocery_stores_rough.shape                            ## DEBUGGING - uncomment to see file shape"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Clean up data"
        },
        {
            "cell_type": "code",
            "execution_count": 22,
            "metadata": {
                "scrolled": true
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "***********Original file venue names ************\nGrocery Store                    6215\nSupermarket                      2526\nDeli / Bodega                     260\nGourmet Shop                      230\nConvenience Store                 160\nFood & Drink Shop                 138\nOrganic Grocery                   131\nFruit & Vegetable Store            48\nBuffet                             48\nFarmers Market                     39\nBakery                             38\nButcher                            36\nHealth Food Store                  34\nPharmacy                           33\nMarket                             19\nNutritionist                       14\nMexican Restaurant                 12\nJuice Bar                          12\nFish Market                        11\nRestaurant                          7\nBig Box Store                       6\nGas Station                         5\nFilipino Restaurant                 4\nItalian Restaurant                  4\nShopping Mall                       4\nFrench Restaurant                   3\nVegetarian / Vegan Restaurant       3\nSandwich Place                      3\nTea Room                            3\nFood                                3\nBuilding                            2\nCoffee Shop                         2\nGreek Restaurant                    1\nName: Venue Category, dtype: int64\n*************************************************\n \n***********Revised file venue names ************\nGrocery Store      6215\nSupermarket        2526\nOrganic Grocery     131\nName: Venue Category, dtype: int64\n*************************************************\n"
                }
            ],
            "source": "## some of the stores have incorrect venue ids and need to be cleaned up.  Only retain the original 3 categories.\n\nNY_grocery_stores = clean_data(NY_grocery_stores_rough,\"Y\")\n\n##NY_grocery_stores.head()                  ## DEBUGGING - uncomment line to see dataframe head"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "##    * * * * * * *  NY BUILD ENDS  * * * * * * *"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# CHICAGO ANALYSIS STARTS \n### Get zip codes for CHG area"
        },
        {
            "cell_type": "code",
            "execution_count": 23,
            "metadata": {
                "scrolled": true
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Using previous file\n(84, 6)\n"
                },
                {
                    "data": {
                        "text/plain": "Zip Code     object\nArea Code    object\nCity         object\nCounty       object\nState        object\nCountry      object\ndtype: object"
                    },
                    "execution_count": 23,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "## If you already have created a zip code file from previous sessions, use that file, otherwise\n## Get Zip Codes from HTML pages. Only keep records which list Chicago as the city.\n\n##See if the file exists\ntry:\n    if Environment != \"IBM\":\n        CHG_zipcodes = pd.read_csv('CHG_zipcodes.csv')\n        \n    else:\n        body = client_398e88bf026c4af6a650152ac459f74a.get_object(Bucket='courseracapstoneproject-donotdelete-pr-e0jpy8qu07bg2j',Key='CHG_zipcodes.csv')['Body']\n        # add missing __iter__ method, so pandas accepts body as file-like object\n        if not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n\n        CHG_zipcodes = pd.read_csv(body)\n    \n    CHG_zipcodes['Zip Code'] = CHG_zipcodes['Zip Code'].astype(object)    ##zip code gets changed to int64, so fix it\n    print (\"Using previous file\")\n           \n## If the file wasn't found or some other error, recreate the file\nexcept:\n    \n    ## Page 1\n\n    print (\"Page 1 Started\")\n    CHG_zipcodes = build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=CHICAGO&pg=1',\"City\",\"CHICAGO\")\n    print (\"Page 1 Ended\")\n\n    ## Page 2\n\n    print (\"Page 2 Started\")\n    CHG_zipcodes = CHG_zipcodes.append(build_city_zipcodes(\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=CHICAGO&pg=2',\"City\",\"CHICAGO\"))\n    print (\"Page 2 Ended\")\n\n    ## Page 3\n\n    print (\"Page 3 Started\")\n    CHG_zipcodes = CHG_zipcodes.append(build_city_zipcodes (\n        'https://www.zip-codes.com/search.asp?pad=1&fld-city=CHICAGO&pg=3',\"City\",\"CHICAGO\"))\n    print (\"Page 3 Ended\")\n\n    ## Reset the index\n    CHG_zipcodes.reset_index(drop=True,inplace=True)\n    \n    ##Write the file for later use\n    CHG_zipcodes.to_csv('CHG_zipcodes.csv',index=False)\n\nprint (CHG_zipcodes.shape)\n\nCHG_zipcodes.dtypes                 ## DEBUGGING - uncomment to print header"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Get CHG zip code Lat and Long"
        },
        {
            "cell_type": "code",
            "execution_count": 24,
            "metadata": {},
            "outputs": [],
            "source": "CHG_zipcodes_lat_long = city_zip_lat_long(CHG_zipcodes)\n\n##CHG_zipcodes_lat_long.head()                          ##DEBUGGING - uncomment to see CHG file"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## Get Venue lat and Long.  Reuse file if previously created\n#### Reusing file saves on FourSquare usage"
        },
        {
            "cell_type": "code",
            "execution_count": 25,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Using previous file\n"
                },
                {
                    "data": {
                        "text/plain": "(1520, 7)"
                    },
                    "execution_count": 25,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": "LIMIT = 100\n\n## initialize data frame\nCHG_grocery_stores_rough = []\n\ntry:\n    if Environment != \"IBM\":\n\n    ## read the file\n        CHG_grocery_stores_rough = pd.read_csv('CHG_grocery_stores_rough.csv')\n    \n    else:\n        \n        body = client_398e88bf026c4af6a650152ac459f74a.get_object(Bucket='courseracapstoneproject-donotdelete-pr-e0jpy8qu07bg2j',Key='CHG_grocery_stores_rough.csv')['Body']\n        # add missing __iter__ method, so pandas accepts body as file-like object\n        if not hasattr(body, \"__iter__\"): body.__iter__ = types.MethodType( __iter__, body )\n\n        CHG_grocery_stores_rough = pd.read_csv(body)\n\n    print (\"Using previous file\")\n\nexcept:\n    print (\"Creating new file\")\n    CHG_grocery_stores_rough = []\n\n\n    CHG_grocery_stores_rough = get_venues(zipcodes=CHG_zipcodes_lat_long['Zip Code'],\n                                           latitudes=CHG_zipcodes_lat_long['Zipcode Latitude'],\n                                            longitudes=CHG_zipcodes_lat_long['Zipcode Longitude'])\n    \n    print (\"Storing new file\")\n    CHG_grocery_stores_rough.to_csv('CHG_grocery_stores_rough.csv',index=False)\n    \nCHG_grocery_stores_rough.shape                            ## DEBUGGING - uncomment to see file shape"
        },
        {
            "cell_type": "code",
            "execution_count": 26,
            "metadata": {
                "scrolled": true
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "***********Original file venue names ************\nGrocery Store              1256\nSupermarket                 150\nFood & Drink Shop            15\nPharmacy                     13\nDeli / Bodega                11\nMexican Restaurant           10\nItalian Restaurant            9\nAmerican Restaurant           9\nConvenience Store             8\nBig Box Store                 7\nHealth Food Store             5\nYoga Studio                   4\nLiquor Store                  4\nMarket                        4\nBakery                        3\nGourmet Shop                  3\nIndian Restaurant             3\nMiscellaneous Shop            2\nFood Truck                    1\nOrganic Grocery               1\nButcher                       1\nFruit & Vegetable Store       1\nName: Venue Category, dtype: int64\n*************************************************\n \n***********Revised file venue names ************\nGrocery Store      1256\nSupermarket         150\nOrganic Grocery       1\nName: Venue Category, dtype: int64\n*************************************************\n"
                }
            ],
            "source": "## some of the stores have incorrect venue ids and need to be cleaned up.  Only retain the original 3 categories.\n\nCHG_grocery_stores = clean_data(CHG_grocery_stores_rough,\"Y\")\n\n##CHG_grocery_stores.head()                             ##DEBUGGING - uncomment to see head of dataframe"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "##    * * * * * * *  CHG BUILD ENDS  * * * * * * *"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# IRS PER CAPITA COMPUTATION BEGINS\n### Get the IRS Data for the Zip Codes Used"
        },
        {
            "cell_type": "code",
            "execution_count": 27,
            "metadata": {
                "scrolled": true
            },
            "outputs": [],
            "source": "## Concantenate the zipcodes into one file\nselect_zipcodes = pd.DataFrame()\nselect_zipcodes = select_zipcodes.append([LA_zipcodes,NY_zipcodes,CHG_zipcodes])\n\n## Extract IRS data using the zipcode file\nselect_IRS_17appalgi_data = IRS_17zpallagi_data.loc[IRS_17zpallagi_data['zipcode'].isin(select_zipcodes[\"Zip Code\"])]\n\n## Get only the needed columns and sum by zipcode\nselect_IRS_sum_data = select_IRS_17appalgi_data[[\"zipcode\",\"N1\",\"A00100\",\"A02650\"]].copy().groupby([\"zipcode\"]).sum()\n\n## Make Zip Code the index so it can be joined with the census file\nselect_IRS_sum_data.rename_axis(\"Zip Code\",inplace=True)\n\n## select_IRS_sum_data.head()                  ##DEBUBBING - uncomment to see file"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Get the Census Information for the zip codes used"
        },
        {
            "cell_type": "code",
            "execution_count": 28,
            "metadata": {},
            "outputs": [],
            "source": "##Get the Census data for those zip codes in the analysis using the file above\nselect_Census_data_2010 = Census_data_2010.loc[Census_data_2010['Zip Code ZCTA'].isin(select_zipcodes[\"Zip Code\"])]\n\n##Reset the index\nselect_Census_data_2010.reset_index(drop=True,inplace=True)\n\n##Rename the column to be used to index the file\nselect_Census_data_2010.set_index(\"Zip Code ZCTA\",inplace=True)\n\n## Rename the axis to use the Zip Code\nselect_Census_data_2010.rename_axis(\"Zip Code\",inplace=True)\n\n## select_Census_data_2010.head()                   DEBUGGING -                         "
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Join the files and create the per capita values"
        },
        {
            "cell_type": "code",
            "execution_count": 29,
            "metadata": {},
            "outputs": [],
            "source": "## Merge the IRS and Census data bases based on the Zip Code\nIRS_Census_data = pd.merge(select_IRS_sum_data, select_Census_data_2010,\n                        how=\"left\", on=[\"Zip Code\"])\n\n##Make the column names a little easier to handle\nIRS_Census_data.rename(columns={'2010 Census Population':'Population'},inplace=True)\n\n##Add the per capita income column for the correlation graphs to follow\nIRS_Census_data[\"Per Cap Income\"] = IRS_Census_data[\"A00100\"]/IRS_Census_data[\"Population\"]\n\n## IRS_Census_data.head()                    ## DEBUGGING - uncomment to see the file"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "##    * * * * * * *  IRS BUILD ENDS  * * * * * * *"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "# BUILD GRAPHS FOR LA, NY, and CHG"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "## LA CORRELATION MAP BEGINS\n### Create the LA store count files and \"inner join\" with the IRS data"
        },
        {
            "cell_type": "code",
            "execution_count": 30,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Intercept  12.65\nCoefficient  [-0.05833333]\n"
                },
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 864x720 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "## Add a column of the store counts by zip code from the Foursquare files\nLA_grocery_count_by_zip = Zip_code_store_counts(LA_grocery_stores)\n\n## Do an inner join to pick up the income columns\nLA_IRS_Census_Grocery_cnt = pd.merge(IRS_Census_data, LA_grocery_count_by_zip,\n                        how=\"inner\", on=[\"Zip Code\"])\n\n## Get the quantile value or graphing\nLA_IRS_Census_Grocery_cnt = quantile_column(LA_IRS_Census_Grocery_cnt)\n\n## Graph the data\ngraph_stores_percap(LA_IRS_Census_Grocery_cnt)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Plot zipcodes and venues for LA"
        },
        {
            "cell_type": "raw",
            "metadata": {
                "scrolled": true
            },
            "source": "zoom = 12\n\n## plot both the venues and the zipcodes\ncity_venue_plot(\"Los Angeles, CA\", LA_grocery_stores, \"Both\", zoom)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### * * * * * LA GRAPHING ENDS  * * * * * *\n\n## NY GRAPHING BEGINS"
        },
        {
            "cell_type": "code",
            "execution_count": 31,
            "metadata": {
                "jupyter": {
                    "source_hidden": true
                }
            },
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Intercept  34.65711039828923\nCoefficient  [-1.24425287]\n"
                },
                {
                    "data": {
                        "image/png": "\n",
                        "text/plain": "<Figure size 864x720 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "## Add a column of the store counts by zip code from the Foursquare files\nNY_grocery_count_by_zip = Zip_code_store_counts(NY_grocery_stores)\n\n## Do an inner join to pick up the income columns\nNY_IRS_Census_Grocery_cnt = pd.merge(IRS_Census_data, NY_grocery_count_by_zip,\n                        how=\"inner\", on=[\"Zip Code\"])\n\n## Get the quantile value or graphing\nNY_IRS_Census_Grocery_cnt = quantile_column(NY_IRS_Census_Grocery_cnt)\n\n## Graph the data\ngraph_stores_percap(NY_IRS_Census_Grocery_cnt)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### Plot zipcodes and venues for NY"
        },
        {
            "cell_type": "raw",
            "metadata": {},
            "source": "zoom = 10\n\n## plot the venues and zip codes for New York\ncity_venue_plot(\"New York, NY\",NY_grocery_stores, \"Both\", zoom)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### * * * * * NY GRAPHING ENDS  * * * * * *\n\n## CHG GRAPHING BEGINS"
        },
        {
            "cell_type": "code",
            "execution_count": 32,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": "Intercept  6.0689655172413755\nCoefficient  [5.32852665]\n"
                },
                {
                    "data": {
                        "image/png": "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\n",
                        "text/plain": "<Figure size 864x720 with 1 Axes>"
                    },
                    "metadata": {
                        "needs_background": "light"
                    },
                    "output_type": "display_data"
                }
            ],
            "source": "## Add a column of the store counts by zip code from the Foursquare files\nCHG_grocery_count_by_zip = Zip_code_store_counts(CHG_grocery_stores)\n\n## Do an inner join to pick up the income columns\nCHG_IRS_Census_Grocery_cnt = pd.merge(IRS_Census_data, CHG_grocery_count_by_zip,\n                        how=\"inner\", on=[\"Zip Code\"])\n\n## Get the quantile value or graphing\nCHG_IRS_Census_Grocery_cnt = quantile_column(CHG_IRS_Census_Grocery_cnt)\n\n## Graph the data\ngraph_stores_percap(CHG_IRS_Census_Grocery_cnt)"
        },
        {
            "cell_type": "raw",
            "metadata": {
                "scrolled": true
            },
            "source": "zoom = 10\n\n## plot the venues and zip codes for Chicago\ncity_venue_plot(\"Chicago, IL\",CHG_grocery_stores,\"Both\", zoom)"
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": "### * * * * * CHG GRAPHING ENDS  * * * * * *"
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": ""
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.6",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.6.9"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}